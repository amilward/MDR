Collection Basket Controller

    def delete(Long id) {
        def collectionBasketInstance = CollectionBasket.get(id)
        if (!collectionBasketInstance) {
            flash.message = message(code: 'default.not.found.message', args: [message(code: 'collectionBasket.label', default: 'CollectionBasket'), id])
            redirect(action: "list")
            return
        }

        try {
            collectionBasketInstance.delete(flush: true)
            flash.message = message(code: 'default.deleted.message', args: [message(code: 'collectionBasket.label', default: 'CollectionBasket'), id])
            redirect(action: "list")
        }
        catch (DataIntegrityViolationException e) {
            flash.message = message(code: 'default.not.deleted.message', args: [message(code: 'collectionBasket.label', default: 'CollectionBasket'), id])
            redirect(action: "show", id: id)
        }
    }
    
        def edit(Long id) {
        def collectionBasketInstance = CollectionBasket.get(id)
        if (!collectionBasketInstance) {
            flash.message = message(code: 'default.not.found.message', args: [message(code: 'collectionBasket.label', default: 'CollectionBasket'), id])
            redirect(action: "list")
            return
        }

        [collectionBasketInstance: collectionBasketInstance]
    }

    def update(Long id, Long version) {
        def collectionBasketInstance = CollectionBasket.get(id)
        if (!collectionBasketInstance) {
            flash.message = message(code: 'default.not.found.message', args: [message(code: 'collectionBasket.label', default: 'CollectionBasket'), id])
            redirect(action: "list")
            return
        }

        if (version != null) {
            if (collectionBasketInstance.version > version) {
                collectionBasketInstance.errors.rejectValue("version", "default.optimistic.locking.failure",
                          [message(code: 'collectionBasket.label', default: 'CollectionBasket')] as Object[],
                          "Another user has updated this CollectionBasket while you were editing")
                render(view: "edit", model: [collectionBasketInstance: collectionBasketInstance])
                return
            }
        }

        collectionBasketInstance.properties = params

        if (!collectionBasketInstance.save(flush: true)) {
            render(view: "edit", model: [collectionBasketInstance: collectionBasketInstance])
            return
        }

        flash.message = message(code: 'default.updated.message', args: [message(code: 'collectionBasket.label', default: 'CollectionBasket'), collectionBasketInstance.id])
        redirect(action: "show", id: collectionBasketInstance.id)
    }